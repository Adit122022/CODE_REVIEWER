import React, { useRef } from 'react';
import Editor from '@monaco-editor/react';
import axios from 'axios';
import { debounce } from 'lodash';

const CodeEditor = ({ code, setCode }) => {
  const monacoRef = useRef(null);

  // Debounced function to fetch Codeium suggestions
  const fetchCodeiumSuggestions = debounce(async (model, position, context, token) => {
    try {
      const currentCode = model.getValue(); // Get full editor content
      const cursorOffset = model.getOffsetAt(position);
      const prefix = currentCode.substring(0, cursorOffset); // Code before cursor

      // Codeium API call (replace with your Codeium API endpoint and key)
      const response = await axios.post(
        'https://api.codeium.com/completions', // Example Codeium endpoint
        {
          text: prefix,
          language: 'javascript',
          max_tokens: 100,
        },
        {
          headers: {
            Authorization: 'Bearer YOUR_CODEIUM_API_KEY', // Obtain from Codeium
          },
        }
      );

      const suggestions = response.data.completions || [];
      return suggestions.map((suggestion, index) => ({
        label: suggestion.text.slice(0, 50) + (suggestion.text.length > 50 ? '...' : ''),
        kind: monacoRef.current.languages.CompletionItemKind.Snippet,
        insertText: suggestion.text,
        insertTextRules: monacoRef.current.languages.CompletionItemInsertTextRule.InsertAsSnippet,
        detail: 'Codeium AI suggestion',
        documentation: 'Generated by Codeium AI',
        range: {
          startLineNumber: position.lineNumber,
          endLineNumber: position.lineNumber,
          startColumn: position.column,
          endColumn: position.column,
        },
      }));
    } catch (error) {
      console.error('Error fetching Codeium suggestions:', error);
      return [];
    }
  }, 500);

  // Handle editor mount to configure Monaco
  const handleEditorDidMount = (editor, monaco) => {
    monacoRef.current = monaco;

    // Configure JavaScript IntelliSense
    monaco.languages.typescript.javascriptDefaults.setDiagnosticsOptions({
      noSemanticValidation: false,
      noSyntaxValidation: false,
    });
    monaco.languages.typescript.javascriptDefaults.setCompilerOptions({
      target: monaco.languages.typescript.ScriptTarget.ESNext,
      allowNonTsExtensions: true,
      moduleResolution: monaco.languages.typescript.ModuleResolutionKind.NodeJs,
      module: monaco.languages.typescript.ModuleKind.ESNext,
      noEmit: true,
      allowJs: true,
    });

    // Register custom completion provider for Codeium suggestions
    monaco.languages.registerCompletionItemProvider('javascript', {
      triggerCharacters: ['.', ' ', '\n'],
      provideCompletionItems: async (model, position, context, token) => {
        const aiSuggestions = await fetchCodeiumSuggestions(model, position, context, token);
        return { suggestions: aiSuggestions };
      },
    });
  };

  return (
    <div className="w-full h-full rounded-xl flex flex-col bg-[#1e1e1e] text-white font-mono overflow-hidden">
      {/* Top Toolbar (like VS Code tab) */}
      <div className="bg-[#2d2d2d] px-4 py-2 flex justify-between items-center border-b border-[#444]">
        <span className="text-sm font-semibold text-gray-200">index.js</span>
        <div className="flex gap-2">
          <span className="w-3 h-3 rounded-full bg-red-500"></span>
          <span className="w-3 h-3 rounded-full bg-yellow-400"></span>
          <span className="w-3 h-3 rounded-full bg-green-500"></span>
        </div>
      </div>

      {/* Editor Area */}
      <div className="flex-1 overflow-auto text-sm leading-relaxed">
        <Editor
          height="100%"
          defaultLanguage="javascript"
          value={code}
          onChange={setCode}
          theme="vs-dark"
          onMount={handleEditorDidMount}
          options={{
            fontFamily: '"Fira Code", monospace',
            fontSize: 14,
            padding: { top: 16, bottom: 16 },
            minimap: { enabled: false },
            scrollBeyondLastLine: false,
            automaticLayout: true,
            suggest: {
              showSnippets: true,
              showWords: true,
              showKeywords: true,
            },
            inlineSuggest: { enabled: true },
            formatOnType: true,
            autoClosingBrackets: true,
            lineNumbers: 'on',
          }}
        />
      </div>
    </div>
  );
};


export default CodeEditor;